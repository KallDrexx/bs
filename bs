#!/usr/bin/env bash

set -e

export BS_VERSION="1.2.1"

error() {
    echo -e "\e[1m\e[31m$1\e[0m"
}

bold() {
    echo -e "\e[36m$1\e[0m"
}

verbose() {
    echo -e "\e[1m\e[30m$1\e[0m"
}

# Print help for bs itself
show-bs-help() {
    echo ""
    echo "bs: Bash build system"
    echo ""
    echo "usage: bs <command> [<args>]"
    echo "usage: bs [<default-commmand-args>]"
    echo "usage: bs ls"
    echo ""
    echo "bs allows you to create build scripts using simple shell scripting:"
    echo ""
    echo "1. Create a ./bs directory in your repository root"
    echo ""
    echo "2. Implement commands by adding *.sh scripts to ./bs with"
    echo "   the name of the command. For example:"
    echo ""
    bold "   bs publish"
    echo ""
    echo "   will call:"
    echo ""
    bold "   ./bs/publish.sh"
    echo ""
    echo "3. Additional arguments can be passed, and will be received by"
    echo "   command scripts as \$1, \$2, etc. For example:"
    echo ""
    bold "   bs publish --mode Release -v"
    echo ""
    echo "   will call:"
    echo ""
    bold "   ./bs/publish.sh --mode Release -v"
    echo ""
    echo "4. You can define a default script at ./bs/default.sh, which will"
    echo "   be called when the argument passed for <command> doesn't match"
    echo "   any script in ./bs."
    echo ""
    bold "   bs restore --all --no-cache"
    echo ""
    echo "   will call:"
    echo ""
    bold "   ./bs/default.sh restore --all --no-cache"
    echo ""
    echo "5. That's actually it, its pretty simple."
    echo ""
    exit 0
}

# Converts the specified command to an executable script path
get-script-path() {
    local command="$1"

    local script_path="./bs/${command}.sh"

    if [ -f "$script_path" ]; then
        echo "$script_path"
        return
    fi

    script_path=$(check-aliases "$command")

    if [ ! "$script_path" = "" ]; then
        echo "$script_path"
    elif [ -f "./bs/default.sh" ]; then
        echo "./bs/default.sh"
    fi
}

# Prints a list of all available commands
list() {
    (
        # List files in the bs root dir
        find ./bs -maxdepth 1 -name "*.sh" -type f -print 

        # List aliases in the alias file
        if [ -f ./bs/.bs_alias ]; then
            cat ./bs/.bs_alias | \
            while read line || [ -n "$line" ]; do
                [[ $line =~ ^(.*)\  ]] && printf -- "${BASH_REMATCH[1]}"
                [[ $line =~ \ (.*)$ ]] && verbose " -> ./bs/${BASH_REMATCH[1]}"
            done
        fi
    ) | \
        sed 's|./bs/||' | \
        sed 's/.sh$//' | \
        grep -v "^_" | \
        grep -v "^default$" | \
        sort
}

# Checks the specified command name against the .bs_alias file,
# and if found, sets the 
check-aliases() {
    local command="$1"
    if [ ! -f ./bs/.bs_alias ]; then
        return
    fi

    local alias_file=$(cat ./bs/.bs_alias)
    
    while read line || [ -n "$line" ]; do
        if [[ "$line" == "$command "* ]]; then
            [[ $line =~ \ (.*)$ ]] && echo "${BASH_REMATCH[1]}"
            return 0
        fi
    done << EOF
$alias_file
EOF
}

main() {
    local command="$1"

    local error_banner="bs ERROR:"

    if [ "$command" = "help" ] || [ "$command" = "--help" ] || [ "$command" = "-h" ]; then
        show-bs-help
        exit 0
    fi

    if [ "$command" = "--version" ] || [ "$command" = "-v" ]; then
        echo "bs: version $BS_VERSION"
        exit 0
    fi

    if [ ! -d ./bs ]; then
        error "$error_banner Expected a build commands directory at ./bs, but none was found"
        exit 1
    fi

    if [ "$command" = "ls" ]; then
        echo "Available bs commands for this project:"
        echo ""

        list | while read line; do
            echo "- $line"
        done

        echo ""
        exit 0
    fi

    local script_path=$(get-script-path "$command")

    if [ "$script_path" = "" ]; then

        error "$error_banner"

        if [ "$command" = "" ]; then
            error "  * No command was specified"
            error "  * No default command was found at ./bs/default.sh"
        else
            error "  * No file was found for ./bs/${command}.sh"
            error "  * No alias was found for ${command} in ./bs/.bs_alias"
        fi
        
        exit 1
    fi

    # Slice out first two arguments (bash, script path), and pass to the command script
    bash "$script_path" "${@:2}"
}

main "$@"


